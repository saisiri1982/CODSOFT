#include <iostream>
#include <vector>
#include <string>
#include <ctime>
using namespace std;

struct Book {
    string title;
    string author;
    string ISBN;
    bool isAvailable;
};

struct Borrower {
    string name;
    string borrowedBookISBN;
    time_t borrowDate;
};

class Library {
private:
    vector<Book> books;
    vector<Borrower> borrowers;

public:
    void addBook(const string& title, const string& author, const string& ISBN) {
        Book newBook = { title, author, ISBN, true };
        books.push_back(newBook);
        cout << "Book added successfully!" << endl;
    }

    void searchBook(const string& keyword) {
        bool found = false;
        for (const auto& book : books) {
            if (book.title.find(keyword) != string::npos || book.author.find(keyword) != string::npos || book.ISBN == keyword) {
                cout << "Found Book - Title: " << book.title << ", Author: " << book.author << ", ISBN: " << book.ISBN << endl;
                found = true;
            }
        }
        if (!found) {
            cout << "No books found with the search keyword: " << keyword << endl;
        }
    }

    void checkoutBook(const string& ISBN, const string& borrowerName) {
        for (auto& book : books) {
            if (book.ISBN == ISBN && book.isAvailable) {
                Borrower newBorrower = { borrowerName, ISBN, time(0) };
                borrowers.push_back(newBorrower);
                book.isAvailable = false;
                cout << "Book checked out successfully!" << endl;
                return;
            }
        }
        cout << "The book is either not available or doesn't exist!" << endl;
    }

    void returnBook(const string& ISBN) {
        for (auto& borrower : borrowers) {
            if (borrower.borrowedBookISBN == ISBN) {
                double fine = calculateFine(borrower.borrowDate);
                for (auto& book : books) {
                    if (book.ISBN == ISBN) {
                        book.isAvailable = true;
                    }
                }
                cout << "Book returned successfully! Fine: $" << fine << endl;
                borrowers.erase(remove(borrowers.begin(), borrowers.end(), borrower), borrowers.end());
                return;
            }
        }
        cout << "This book was not borrowed!" << endl;
    }

    double calculateFine(time_t borrowDate) {
        time_t currentTime = time(0);
        double seconds = difftime(currentTime, borrowDate);
        int days = seconds / (60 * 60 * 24);
        if (days > 14) {
            return (days - 14) * 0.5; 
        }
        return 0.0;
    }

    void showBooks() {
        cout << "Books in Library:" << endl;
        for (const auto& book : books) {
            cout << "Title: " << book.title << ", Author: " << book.author << ", ISBN: " << book.ISBN << ", Availability: " << (book.isAvailable ? "Available" : "Checked Out") << endl;
        }
    }
};

int main() {
    Library library;
    int choice;
    string title, author, ISBN, borrowerName;

    do {
        cout << "\nLibrary Management System" << endl;
        cout << "1. Add Book" << endl;
        cout << "2. Search Book" << endl;
        cout << "3. Checkout Book" << endl;
        cout << "4. Return Book" << endl;
        cout << "5. View All Books" << endl;
        cout << "6. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;
        cin.ignore(); 

        switch (choice) {
            case 1:
                cout << "Enter book title: ";
                getline(cin, title);
                cout << "Enter book author: ";
                getline(cin, author);
                cout << "Enter book ISBN: ";
                getline(cin, ISBN);
                library.addBook(title, author, ISBN);
                break;

            case 2:
                cout << "Enter search keyword (title/author/ISBN): ";
                string keyword;
                getline(cin, keyword);
                library.searchBook(keyword);
                break;

            case 3:
                cout << "Enter book ISBN to checkout: ";
                getline(cin, ISBN);
                cout << "Enter borrower name: ";
                getline(cin, borrowerName);
                library.checkoutBook(ISBN, borrowerName);
                break;

            case 4:
                cout << "Enter book ISBN to return: ";
                getline(cin, ISBN);
                library.returnBook(ISBN);
                break;

            case 5:
                library.showBooks();
                break;

            case 6:
                cout << "Exiting the system." << endl;
                break;

            default:
                cout << "Invalid choice, please try again." << endl;
        }

    } while (choice != 6);

    return 0;
}
